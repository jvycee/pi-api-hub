{
    "HubSpot MCP Tool Call": {
        "prefix": "mcp-tool",
        "body": [
            "// üçå HubSpot Banana MCP Tool Call",
            "const result = await mcp.callTool('${1|hubspot-list-objects,hubspot-search-objects,hubspot-get-user-details,banana-get-contacts-cached,banana-search-cached|}', {",
            "    ${2:// Tool parameters}",
            "    $3",
            "});",
            "",
            "if (result.success) {",
            "    console.log('‚úÖ Tool call successful:', result.data);",
            "    $4",
            "} else {",
            "    console.error('‚ùå Tool call failed:', result.error);",
            "}"
        ],
        "description": "Create a HubSpot MCP tool call with error handling"
    },
    "HubSpot Contact List": {
        "prefix": "mcp-contacts",
        "body": [
            "// üçå Get HubSpot contacts with banana-powered caching",
            "const contacts = await mcp.callTool('banana-get-contacts-cached', {",
            "    limit: ${1:50},",
            "    properties: ['firstname', 'lastname', 'email', 'company'],",
            "    useCache: ${2:true}",
            "});",
            "",
            "contacts.data.contacts.forEach(contact => {",
            "    console.log(`Contact: \\${contact.properties.firstname} \\${contact.properties.lastname} (\\${contact.properties.email})`);",
            "    $3",
            "});"
        ],
        "description": "Fetch HubSpot contacts using banana-powered caching"
    },
    "HubSpot Contact Search": {
        "prefix": "mcp-search",
        "body": [
            "// üçå Search HubSpot contacts",
            "const searchResults = await mcp.callTool('hubspot-search-objects', {",
            "    objectType: 'contacts',",
            "    filterGroups: [",
            "        {",
            "            filters: [",
            "                {",
            "                    propertyName: '${1:email}',",
            "                    operator: '${2|EQ,CONTAINS_TOKEN,GTE,LTE|}',",
            "                    value: '${3:search_value}'",
            "                }",
            "            ]",
            "        }",
            "    ],",
            "    properties: ['firstname', 'lastname', 'email', 'company'],",
            "    limit: ${4:100}",
            "});",
            "",
            "console.log(`Found \\${searchResults.data.results.length} contacts`);",
            "$5"
        ],
        "description": "Search HubSpot contacts with filters"
    },
    "HubSpot Batch Create": {
        "prefix": "mcp-batch-create",
        "body": [
            "// üçå Batch create HubSpot contacts",
            "const batchResult = await mcp.callTool('hubspot-batch-create-objects', {",
            "    objectType: 'contacts',",
            "    inputs: [",
            "        {",
            "            properties: {",
            "                firstname: '${1:John}',",
            "                lastname: '${2:Doe}',",
            "                email: '${3:john.doe@example.com}',",
            "                company: '${4:Example Corp}'",
            "            }",
            "        },",
            "        {",
            "            properties: {",
            "                firstname: '${5:Jane}',",
            "                lastname: '${6:Smith}',",
            "                email: '${7:jane.smith@example.com}',",
            "                company: '${8:Another Corp}'",
            "            }",
            "        }",
            "    ]",
            "});",
            "",
            "console.log(`Created \\${batchResult.data.results.length} contacts`);",
            "$9"
        ],
        "description": "Batch create multiple HubSpot contacts"
    },
    "MCP Error Handling": {
        "prefix": "mcp-error",
        "body": [
            "// üçå MCP call with comprehensive error handling",
            "try {",
            "    const result = await mcp.callTool('${1:tool-name}', {",
            "        $2",
            "    });",
            "    ",
            "    if (result.success) {",
            "        console.log('‚úÖ Success:', result.data);",
            "        $3",
            "    } else {",
            "        console.warn('‚ö†Ô∏è Tool returned error:', result.error);",
            "        $4",
            "    }",
            "} catch (error) {",
            "    if (error.code === 'ECONNREFUSED') {",
            "        console.error('‚ùå MCP server not running');",
            "    } else if (error.response?.status === 401) {",
            "        console.error('‚ùå Authentication failed - check API key');",
            "    } else if (error.response?.status === 429) {",
            "        console.error('‚ùå Rate limit exceeded - retry later');",
            "    } else {",
            "        console.error('‚ùå Unexpected error:', error.message);",
            "    }",
            "    $5",
            "}"
        ],
        "description": "MCP tool call with comprehensive error handling"
    },
    "MCP Analytics": {
        "prefix": "mcp-analytics",
        "body": [
            "// üçå Get MCP usage analytics",
            "const analytics = await mcp.callTool('banana-usage-analytics', {",
            "    timeRange: '${1|1h,24h,7d,30d|}',",
            "    includeBreakdown: ${2:true},",
            "    includePerformance: ${3:true}",
            "});",
            "",
            "console.log('üìä Analytics Summary:');",
            "console.log(`- Total Requests: \\${analytics.data.totalRequests}`);",
            "console.log(`- Average Response Time: \\${analytics.data.avgResponseTime}ms`);",
            "console.log(`- Success Rate: \\${(analytics.data.successRate * 100).toFixed(1)}%`);",
            "",
            "// Tool breakdown",
            "analytics.data.toolBreakdown.forEach(tool => {",
            "    console.log(`- \\${tool.name}: \\${tool.count} calls, \\${tool.avgTime}ms avg`);",
            "});",
            "$4"
        ],
        "description": "Get MCP usage analytics and performance metrics"
    },
    "MCP Stream Contacts": {
        "prefix": "mcp-stream",
        "body": [
            "// üçå Stream large contact datasets",
            "const stream = await mcp.callTool('banana-get-contacts-streaming', {",
            "    limit: ${1:1000},",
            "    batchSize: ${2:100},",
            "    properties: ['firstname', 'lastname', 'email'],",
            "    onBatch: (batch, batchIndex) => {",
            "        console.log(`Processing batch \\${batchIndex + 1}: \\${batch.length} contacts`);",
            "        $3",
            "    },",
            "    onComplete: (totalContacts) => {",
            "        console.log(`‚úÖ Streaming complete: \\${totalContacts} contacts processed`);",
            "        $4",
            "    },",
            "    onError: (error) => {",
            "        console.error('‚ùå Streaming error:', error);",
            "        $5",
            "    }",
            "});",
            "",
            "console.log('üöÄ Contact streaming started...');"
        ],
        "description": "Stream large contact datasets with batch processing"
    },
    "MCP Configuration": {
        "prefix": "mcp-config",
        "body": [
            "// üçå MCP Configuration Setup",
            "const mcpConfig = {",
            "    serverUrl: '${1:http://localhost:3000}',",
            "    apiKey: process.env.BANANA_ADMIN_KEY,",
            "    timeout: ${2:10000},",
            "    retries: ${3:3},",
            "    caching: {",
            "        enabled: ${4:true},",
            "        ttl: ${5:300000} // 5 minutes",
            "    },",
            "    tools: {",
            "        preferBanana: ${6:true}, // Prefer banana-powered tools",
            "        fallbackToOfficial: ${7:true}",
            "    }",
            "};",
            "",
            "// Initialize MCP client",
            "const mcp = new MCPClient(mcpConfig);",
            "await mcp.initialize();",
            "",
            "console.log('üçå MCP client initialized successfully');",
            "$8"
        ],
        "description": "Configure MCP client with banana-powered optimizations"
    }
}